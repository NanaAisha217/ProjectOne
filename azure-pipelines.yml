# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

# trigger:
# - main

# pool:
#   vmImage: ubuntu-latest

# steps:
# - script: echo Hello, world!
#   displayName: 'Run a one-line script'

# - script: |
#     echo Add other tasks to build, test, and deploy your project.
#     echo See https://aka.ms/yaml
#   displayName: 'Run a multi-line script'

# trigger:
#   - main

# pool:
#   name: Default  # or whatever agent pool you're using

# variables:
#   buildConfiguration: 'Release'

# steps:
# - task: UseDotNet@2
#   inputs:
#     packageType: 'sdk'
#     version: '8.0.x'
#     installationPath: $(Agent.ToolsDirectory)/dotnet

# - task: DotNetCoreCLI@2
#   inputs:
#     command: 'restore'
#     projects: '**/*.csproj'

# - task: DotNetCoreCLI@2
#   inputs:
#     command: 'build'
#     projects: '**/*.csproj'
#     arguments: '--configuration $(buildConfiguration)'

# - task: DotNetCoreCLI@2
#   inputs:
#     command: 'publish'
#     projects: '**/*.csproj'
#     arguments: '--configuration $(buildConfiguration) --output $(Build.ArtifactStagingDirectory)'

# - task: PublishBuildArtifacts@1
#   inputs:
#     pathToPublish: '$(Build.ArtifactStagingDirectory)'
#     artifactName: 'drop'

# trigger:
#   - main

# pool:
#   name: Default  # Self-hosted agent pool name

# variables:
#   buildConfiguration: 'Release'
#   outputPath: '$(Build.ArtifactStagingDirectory)/publish'

# steps:
# - task: UseDotNet@2
#   inputs:
#     packageType: 'sdk'
#     version: '8.0.x'
#     installationPath: $(Agent.ToolsDirectory)/dotnet

# - task: DotNetCoreCLI@2
#   inputs:
#     command: 'restore'
#     projects: '**/*.csproj'

# - task: DotNetCoreCLI@2
#   inputs:
#     command: 'build'
#     projects: '**/*.csproj'
#     arguments: '--configuration $(buildConfiguration)'

# - task: DotNetCoreCLI@2
#   inputs:
#     command: 'publish'
#     projects: '**/*.csproj'
#     arguments: '--configuration $(buildConfiguration) --output $(outputPath)'

# #  Deploy to IIS folder (overwrite existing files)
# - task: CopyFiles@2
#   inputs:
#     SourceFolder: '$(outputPath)'
#     Contents: '**'
#     TargetFolder: 'C:\inetpub\wwwroot\DemoWebApp'
#     OverWrite: true

# # (Optional) To help with troubleshooting:
# - script: dir C:\inetpub\wwwroot\DemoWebApp
#   displayName: 'Show deployed files'

trigger:
  - main

pool:
  name: Default

variables:
  buildConfiguration: 'Release'
  projectPath: '**/ProjectOneDemoPipeline.csproj'
  outputDir: '$(Build.ArtifactStagingDirectory)/publish'

steps:
- task: UseDotNet@2
  inputs:
    packageType: 'sdk'
    version: '8.0.x'
    installationPath: $(Agent.ToolsDirectory)/dotnet

- task: DotNetCoreCLI@2
  inputs:
    command: 'restore'
    projects: '$(projectPath)'

- task: DotNetCoreCLI@2
  inputs:
    command: 'build'
    projects: '$(projectPath)'
    arguments: '--configuration $(buildConfiguration)'

- task: DotNetCoreCLI@2
  inputs:
    command: 'publish'
    publishWebProjects: false
    projects: '$(projectPath)'
    arguments: '--configuration $(buildConfiguration) --output $(outputDir)'
    zipAfterPublish: false

- task: CopyFiles@2
  inputs:
    SourceFolder: '$(outputDir)'
    Contents: '**'
    TargetFolder: 'C:\\inetpub\\wwwroot\\DemoWebApp'
    OverWrite: true

- task: PublishBuildArtifacts@1
  inputs:
    pathToPublish: '$(outputDir)'
    artifactName: 'drop'
